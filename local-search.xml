<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Reverse_Assembly</title>
    <link href="/2023/09/24/Reverse-Assembly/"/>
    <url>/2023/09/24/Reverse-Assembly/</url>
    
    <content type="html"><![CDATA[<h1 id="reverse">Reverse</h1><p>This article is mostly about the basic knowledge ofassembly.Including some basic instruction, calling convention and a lotmore. There might have dozens of grammar mistake. Please tell me if youfind any.註:大部分筆記都是在我用虛擬機的時候打的，因為在虛擬機不想要一直切換輸入法，所以虛擬機中只有英文，請多多見諒。</p><h2 id="register">Register</h2><p>Most register don't have specific function. While <code>ESP</code>and <code>EBP</code> have specific function.</p><ul><li><strong>ESP</strong>: stack pointer.</li><li><strong>EBP</strong>: base pointer.</li><li><strong>rip</strong>: the instruction pointer, point to the nextintruction.</li><li><strong>rsp</strong>: the stack pointer, point to the top of thestack. <code>EAX(32bits)</code> can be viewed as two<code>AX(16bits)</code> combine together. and the higher part of<code>AX</code> is <code>AH(bits)</code>, while the lower part of<code>AX</code> is <code>AL(bits)</code>.</li></ul><h1 id="assembly">Assembly</h1><h3 id="declaration-of-static-data">Declaration of static data</h3><p>use <code>data</code> to start declaration data. <code>.byte</code>,<code>short</code>, <code>long</code>, are instruction of declaration,which decide how many memory will this variable take. <code>byte</code>:one byte. <code>short</code>: two byte. <code>long</code>: four byte.<code>zero</code>: to setup series of zero. <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">.data<br>    barr:<br>           .zero <span class="hljs-number">10</span>; <span class="hljs-comment">// declaring ten bytes of zero right afer the position of the label.</span><br>    var :<br>           .byte <span class="hljs-number">64</span> ;declare var, and the data is <span class="hljs-number">64</span><br>           .byte <span class="hljs-number">10</span> ;declare a nother data <span class="hljs-number">10</span>, this data have no so-called label, the address is var+<span class="hljs-number">1.</span><br>       <br></code></pre></td></tr></table></figure> ##commands</p><h3 id="the-operating-suffix">the operating suffix:</h3><p>a given memory address of the data types from referenced Assemblyinstructions inferred. However, in some cases, we use the memory in the“ pit “ of the size is not clear. Say this Directive mov<code>$2,(%ebx)</code>. This Directive whether it should be “ 2 “ forthis value to move to EBX in value represents the address of the “ pit “of a single byte ? Perhaps it is represented by a 32-bit integerrepresentation of 2 is moved to the From address EBX beginning of the 4bytes. Since these two explanations are plausible, but computerassembler must be clear which explanation is correct, the computer isvery simple, either is wrong or right. Prefix <code>b</code>,<code>w</code>, and <code>l</code> is to solve this problem, which aredenoted 1, 2 and 4 bytes in size. ## Data Movement Instruction</p><h3 id="move">move:</h3><p>this command basically copy the data of the first parameter, andcover the data of the second parameter. <figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm">mov (<span class="hljs-variable">%ebx</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%eax</span><span class="hljs-comment">; move the data inside ebx into eax. (%eax) means the data stored inside eax</span><br>mov (<span class="hljs-variable">%ebx</span>)<span class="hljs-punctuation">,</span> var<span class="hljs-comment">; move four bytes of data inside ebx into var. </span><br>mov (<span class="hljs-variable">%esi</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%ebx</span><span class="hljs-punctuation">,</span> <span class="hljs-number">4</span>)<span class="hljs-punctuation">,</span> ESI<span class="hljs-comment">; To move the four bytes of data, which starts from ESI+4*EBX, into EDX; </span><br></code></pre></td></tr></table></figure> :warning: Notedthat if you write to a 32-bit partial(e.g. eax), the CPU will zero outthe rest of the register.</p><h3 id="push">push:</h3><p>move the parameter into the top of the stack. First of all, thenumber of <code>ESP-4</code>, and the <code>ESP</code> will point to thenext bytes. &gt; the stack memory is from high to low. <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">push</span> %eax; <span class="hljs-built_in">push</span> eax into stach <br><span class="hljs-built_in">push</span> <span class="hljs-keyword">var</span>; <span class="hljs-built_in">push</span> <span class="hljs-keyword">var</span> into stack (<span class="hljs-number">4</span> bytes)<br></code></pre></td></tr></table></figure></p><h3 id="pop">pop:</h3><p>remove 4 bytes of data from stack, and put into a specific parameter.and let <code>ESP+4</code> <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">pop %edi; remove <span class="hljs-keyword">the</span> data <span class="hljs-built_in">from</span> stack, <span class="hljs-keyword">and</span> <span class="hljs-built_in">put</span> <span class="hljs-keyword">it</span> <span class="hljs-keyword">into</span> edi.<br>pop (%ebx); remove <span class="hljs-keyword">the</span> data <span class="hljs-built_in">from</span> stack, <span class="hljs-keyword">and</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">put</span> <span class="hljs-keyword">it</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> <span class="hljs-literal">four</span> <span class="hljs-keyword">bytes</span> starting <span class="hljs-built_in">from</span> edx.<br></code></pre></td></tr></table></figure> &gt; stack is thedata-structure that is first in last out, last in first out.</p><h3 id="lea">lea:</h3><ul><li>Load effective address.</li><li>lea Instruct to the first parameter specifies the memory unit intothe second parameter of the specified register. Note that this commanddoes not load the memory unit of the content, just calculate theeffective address and put it into the register. This is for obtaining apointer to a memory area of a pointer or to perform simple arithmeticoperations is very useful.</li><li>Noted that lea is one of the few function that can directly accessthe rip register. <figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm">lea (<span class="hljs-variable">%ebx</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%esi</span><span class="hljs-punctuation">,</span><span class="hljs-number">8</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%edi</span> <span class="hljs-comment">;the value of EBX+8*ESI is moved to EDI</span><br>lea val(<span class="hljs-punctuation">,</span><span class="hljs-number">1</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%eax</span> <span class="hljs-comment">;the value of val is moved to EAX</span><br>lea eax<span class="hljs-punctuation">,</span> [rip] # <span class="hljs-keyword">load</span> the next instruction into rax.<br></code></pre></td></tr></table></figure></li></ul><h2 id="logical-operation-instruction">Logical OperationInstruction</h2><h3 id="add">add:</h3><p><code>add</code> Instruction will sum up the two parameter, and theresulted will be stored in second parameter. <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">add</span> $<span class="hljs-number">10</span>, %eax ;EAX 中的值被设置为了 EAX+<span class="hljs-number">10</span>.<br><span class="hljs-attribute">addb</span> $<span class="hljs-number">10</span>, (%eax) ;往 EAX 中的值 所代表的内存单元地址 加上 <span class="hljs-number">1</span> 个字节的数字 <span class="hljs-number">10</span>.<br></code></pre></td></tr></table></figure> ### sub:subInstruction will be the second parameter value of the firstsubtraction, is behind the minus in front of that, then the result isstored to the second parameter. And addAs, both parameters can be aregister, but the two parameters can have at most one memory unit.<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-function"><span class="hljs-keyword">sub</span> %<span class="hljs-title">ah</span>, %<span class="hljs-title">al</span> </span>;AL 被设置成 AL-AH<br><span class="hljs-function"><span class="hljs-keyword">sub</span> $216, %<span class="hljs-title">eax</span> </span>;将 EAX 中的值减去 <span class="hljs-number">216</span><br></code></pre></td></tr></table></figure></p><h3 id="inc-dec">inc, dec:</h3><p><code>inc</code> make the parameter plus 1, and <code>dec</code> makethe parameter minus 1.</p><h3 id="imul">imul:</h3><ul><li>integer multiplication</li><li>There are two form: 2 parameter, 3parameter.</li></ul><ol type="1"><li>two parameter:the first two parameters are multiplied, then theresult is stored to the second parameter. Result of the operation ( i.e.the second parameter ) must be a register.</li><li>three parameter: the first is it will be the 1st parameter and thefirst 2 parameters are multiplied, then the result is stored to thefirst 3 parameters, and of course, the 3rd parameter must be a register.In addition, the 1 argument must be a constant. <figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">imul (<span class="hljs-variable">%ebx</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%eax</span> <span class="hljs-comment">;将 EAX 中的 32 位整数, 与 EBX 中的内容所指的内存单元, 相乘, 然后把结果存到 EAX 中.</span><br>imul $<span class="hljs-number">25</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%edi</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%esi</span> <span class="hljs-comment">;ESI 被设置为 EDI * 25.</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="idiv">idiv:</h3><ul><li>integer divider</li><li>此操作數為除數，而被除數則為EDX : EAX 中的內容（一個64位的整數），除法結果( 商) 存在EAX 中, 而所得的餘數存在EDX 中. <figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">idiv <span class="hljs-variable">%ebx</span> <span class="hljs-comment">;用 EDX : EAX 的值除以 EBX 的值. 商存放在 EAX 中, 余数存放在 EDX 中.</span><br>idivw (<span class="hljs-variable">%ebx</span>) <span class="hljs-comment">;将 EDX : EAX 的值除以存储在 EBX 所对应内存单元的 32 位值. 商存放在 EAX 中, 余数存放在 EDX 中.</span><br></code></pre></td></tr></table></figure> ### and, or , xor: These instructions are for their parameters to theappropriate logic operation, the operation result is stored to the<strong>first </strong>parameter. ### shr, shl: bitwise shift, move thedigit by the second parameter of the decision, to move after the vacancyto get 0 up.</li></ul><h2 id="flow-control-instruction">Flow Control Instruction</h2><p>x86 處理器有一個指令指針寄存器( EIP ), 該寄存器為32 位寄存器,它用來在內存中指示我們輸入彙編指令的位置.就是說這個寄存器指向哪個內存單元,那個單元存儲的機器碼就是程序執行的指令.通常它是指向我們程序要執行的下一條指令. 但是你不能直接操作EIP 寄存器,你需要流程控制指令來隱式地給它賦值.</p><h3 id="jmp">jmp:</h3><p>jump to the assigned address. And execute the code at the address.&gt; jmp ususally jump to label. <figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs llvm">    mov <span class="hljs-number">8</span>(<span class="hljs-variable">%ebp</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%esi</span><br><span class="hljs-symbol">begin:</span><br>    <span class="hljs-keyword">xor</span> <span class="hljs-variable">%ecx</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%ecx</span><br>    mov (<span class="hljs-variable">%esi</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%eax</span><br> ...................<br> jmp <span class="hljs-keyword">begin</span> <span class="hljs-comment">; jump to the begin label </span><br>          <br></code></pre></td></tr></table></figure></p><h3 id="cmp">cmp:</h3><p>compare the value of two number. <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">cmpb $<span class="hljs-number">10</span>, (%ebx)<br>jeq loop; <span class="hljs-comment">// if the number in ebx is equal to 10, then jump into the &quot;loop&quot; label.</span><br></code></pre></td></tr></table></figure></p><h3 id="jcondition">jcondition:</h3><p>這些指令是條件跳轉指令, 它們基於一組條件代碼的狀態,這些條件代碼的狀態存放在稱為機器狀態字( machine status word )的特殊寄存器中. 機器狀態字的內容包括關於最後執行的算術運算的信息. 例如,這個字的一個位表示最後的結果是否為0. 另一個位表示最後結果是否為負數.基於這些條件代碼, 可以執行許多條件跳轉. 例如,如果最後一次算術運算結果為0, 則 jz 指令就是跳轉到指定參數標籤. 否則,程序就按照流程進入下一條指令.</p><p>許多條件分支的名稱都是很直觀的, 這些指令的運行,都和一個特殊的比較指令有關, cmp( 見下文). 例如, 像 jle 和 jne 這種指令,它們首先對參數進行 cmp 操作. <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">je &lt;label; <span class="hljs-comment">//jump when equal; </span><br>jne &lt;label; <span class="hljs-comment">//jump when not equal;</span><br>jz &lt;label; <span class="hljs-comment">//jump when the result is 0;</span><br>jg &lt;label; <span class="hljs-comment">//jump when greater;</span><br>jge &lt;label;<span class="hljs-comment">//jump when greater or equal;</span><br>jl &lt;label; <span class="hljs-comment">//jump when less;</span><br>jle &lt;label; <span class="hljs-comment">//jump when less or equal;</span><br></code></pre></td></tr></table></figure></p><h4 id="example">example</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">cmp %ebx, %eax<br>jle done<br>;<span class="hljs-keyword">if</span> the value in ebx is smaller than eax, then jump to <span class="hljs-string">&quot; done &quot;</span> label, or execute the following instruction.<br></code></pre></td></tr></table></figure><h3 id="call-ret">call, ret:</h3><p>while calling a function, the computer record the current addressinto the stack. when the process is over, return will bring the EIP tothe previous address. <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">call &lt;label;<br>ret ;<br></code></pre></td></tr></table></figure></p><h2 id="calling-convention">Calling Convention:</h2><p>為了方便不同的程序員去分享代碼和運行庫, 並簡化一般子程序的使用,程序員們通常會遵守一定的約定( Calling Convention ).調用約定是關於如何從例程調用和返回的協議.例如，給定一組調用約定規則，程序員不需要檢查子例程的定義來確定如何將參數傳遞給該子例程.此外，給定一組調用約定規則，可以使高級語言編譯器遵循規則，從而允許手動編碼的彙編語言例程和高級語言例程相互調用</p><h3 id="caller-rules">Caller Rules:</h3><ol type="1"><li>In the subroutine call, should save some of the contents of theregister. Caller saved register are EAX, ECX, EDX. Because theseregister may be used when the subroutine is running, so the value ofregister should be push into stack.</li><li>If we want to pass some parameter to the subroutine, we should pushthe parameter into stack before calling function. The last parametershould be put into the stack first.</li><li>To call a subroutine, use <code>call</code> instruction.</li></ol><blockquote><p>After return, the return value should be inside EAX. To return tomachine state, we should 1.remove parameter from stack. 2.put the EAX,ECX, EDX previous value, which is put into stack previously, back intoEAX, ECX, EDX.</p></blockquote><h3 id="example-1">Example:</h3><p>下面的代碼就是個活生生的例子, 它展示了遵循約定的函數調用.調用者正在調用一個帶有3 個整數參數的函數myFunc. 第一個參數是EAX,第二個參數是常數216; 第三個參數位於EBX 的值所代表的內存地址.<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">push (%ebx) <span class="hljs-comment">//put the third parameter into stack.</span><br>push $<span class="hljs-number">216</span> ;<span class="hljs-comment">//put the second parameter into stack.</span><br>push %eax ; <span class="hljs-comment">//put the first parameter into stack.</span><br>call myFunc ;<span class="hljs-comment">//calling this function </span><br>add $<span class="hljs-number">12</span>, %esp <span class="hljs-comment">// to move the pointer of the stack, to where there are no parameter.</span><br></code></pre></td></tr></table></figure> &gt; Stack is viewed as a temperary data saver.</p><h3 id="callee-rules">Callee Rules:</h3><p>subroutine should follow the some rule at the beginning ofsubroutine. 1. Push the value of EBP into stack, and copy the data ofESP into EBP. 2. Create space inside stack. Recall that stack growthdownward, therefore, we should minus the pointer to stack to create morespace. <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">sub $<span class="hljs-number">12</span>, %esp; <span class="hljs-built_in">create</span> <span class="hljs-number">12</span>bits <span class="hljs-keyword">of</span> <span class="hljs-literal">space</span> <span class="hljs-built_in">to</span> stack, which is <span class="hljs-keyword">the</span> <span class="hljs-literal">space</span> <span class="hljs-keyword">of</span> <span class="hljs-literal">three</span> <span class="hljs-keyword">words</span>.<br></code></pre></td></tr></table></figure> 3. Callee-saved register EBX,EDI,ESI will beretained by calling convention.</p><h3 id="return">return:</h3><ol type="1"><li>save the return value inside EAX.</li><li>Restore any modified register value.calleed saved old value.</li><li>release some variable, done this by adding corresponding value.</li><li>After returning, pop EBP in stack to restore caller's base pointvalue. Recall that we push the EBP when we were calling asubroutine.</li><li>Through the implementation of <code>ret</code> Instruction toreturn.</li></ol><h3 id="example-2">Example</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c">.text;<span class="hljs-comment">//将 myFunc 定义为全局 ( 导出 ) 函数</span><br>    .globl myFunc<br>    .type myFunc, @function<br>    myFunc :<br>    ;prologue<br>    push %ebp ;<span class="hljs-comment">//saved the caller&#x27;s base pointer</span><br>    mov %esp, %ebp ;<span class="hljs-comment">//set new base pointer.</span><br>    sub $<span class="hljs-number">4</span>, %esp ; <span class="hljs-comment">//create 4 bytes space. </span><br>    push %edi; <br>    push %esi ;this function will modify EDI and ESI, so push them into <span class="hljs-built_in">stack</span>.<br>    ;<span class="hljs-comment">//there is no need to save EBX, EBP and ESP</span><br>    ;<span class="hljs-comment">//main part of the subroutine</span><br>    mov <span class="hljs-number">8</span>(%ebp), %eax ;<span class="hljs-comment">//move parameter 1 into EAX. [ebp+8] -&gt; eax</span><br>    mov <span class="hljs-number">12</span>(%ebp), %esi ;<span class="hljs-comment">//move second parameter into ESI. [ebp+12]-&gt;esi</span><br>    mov <span class="hljs-number">16</span>(%ebp), %edi ;<span class="hljs-comment">//move the third parameter into EDI.</span><br>    mov %edi, <span class="hljs-number">-4</span>(%ebp) ;<span class="hljs-comment">//move EDI to temperary variable.</span><br>    add %esi, <span class="hljs-number">-4</span>(%ebp) ;<span class="hljs-comment">//add ESI to temperary variable</span><br>    add <span class="hljs-number">-4</span>(%ebp), %eax ;<span class="hljs-comment">// add the value of temperary variable to eax; </span><br>    ; <span class="hljs-comment">// the end of the subroutine</span><br>    pop %esi ;<span class="hljs-comment">//restore the value of the</span><br>    pop %edi<br>    mov %ebp, %esp ;释放局部变量<br>    pop %ebp ;恢复调用者的基指针值<br>    ret<br></code></pre></td></tr></table></figure><h1 id="x64-assembler">X64 Assembler</h1><p>x86-64 is the 64-bits version of x86. Most registers are generalpurpopse. While some have specific function. - rsp: used as the stackpointer. - rax: the function return value.</p><h3 id="setx-and-movx">setx and movx</h3><p>execute the instruction if x(the condition) is true.<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xmp">sete dst; if equal then set the dst from 0 to 1.<br>setge dst; if greater equal, set the dst from 0 to 1.<br>cmovle src, dst; if less equal ,mov the src to dst. <br></code></pre></td></tr></table></figure></p><h1 id="elf">ELF</h1><ul><li>ELF header: in the front of the file, describe the the basicproperties.</li><li>Program header table: is optional, it tells the system how to createa process image. The executable file must have a program header table,and the relocatable files do not need.</li><li>section:</li></ul><h2 id="readelf">readelf</h2><h3 id="analysis">analysis</h3><p>a better way to use readelf, is using c++filter to change demanglesymbol name into readable symbol name. <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$readelf</span> -Ws &lt;library&gt; | c++filt<br></code></pre></td></tr></table></figure></p><h3 id="find-dependant-libraries">find dependant libraries</h3><p>can simply use ldd to find out, or usign readelf and grep command.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$readelf</span> -d &lt;executable binary|library&gt; | grep NEEDED<br></code></pre></td></tr></table></figure></p><h1 id="memory">Memory</h1><p>In order to use the user program in the runtime has a private addressspace, has its own CPU, just like the exclusivity of the entire computeras a modern operating system proposes the virtual memory concept.</p><h2 id="stack">Stack</h2><p>Is the First In First Out(FIFO) volume. Stack grow from high memoryaddress to low memory address, <code>ebp</code> is pointed to the bottonof the stack, while <code>esp</code> is pointed to the top of the stack.- <code>Push</code>: <code>esp</code> will minus, and put the operandinto the address where the <code>rsp</code> pointed to. -<code>Pop</code>: get the number inside <code>esp</code> and minus<code>esp</code> with 4.</p><h3 id="calling-convention-of-x86-system">calling convention of x86system</h3><ol type="1"><li>push specific parameter into stack.</li><li>push the next instruction into stack.</li><li>jump to the function.</li></ol><p>the second step and the third step execute with<code>call</code>.</p><h3 id="the-beginning-of-the-function-of-x86">the beginning of thefunction of x86</h3><ul><li>begin<ul><li><code>push ebp</code> -&gt;push ebp into stack.</li><li><code>mov ebp, esp</code>-&gt;make the botton of the stack be thetop of the stack</li><li><code>sub esp, xxx</code>-&gt;create spaces for the stack.</li></ul></li><li>return<ul><li><code>pop XXX</code> : restore the stored register value.</li><li><code>mov esp, ebp</code>: make the top of the stack the addresswhere it used to start.</li><li><code>pop ebp</code>: get the stored ebp value.</li><li><code>ret</code> : get the return address from the stack and returnto the main function.</li></ul></li></ul><h2 id="reference">Reference</h2><p>https://www.bookstack.cn/read/CTF-All-In-One/doc-1.4_web_basic.md</p>]]></content>
    
    
    
    <tags>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Wargame_Leviathan</title>
    <link href="/2023/09/22/Wargame-Leviathan/"/>
    <url>/2023/09/22/Wargame-Leviathan/</url>
    
    <content type="html"><![CDATA[<p>This is a write up of Leviathan. Leviathan is a wargame, mostly aboutreverese engineering. There are seven level in this wargame. I collectthe key to every level at the end of this blog, please use it if youwant to get access of certain level.</p><h2 id="leviathan0">Leviathan0</h2><p>first use string to detect some useful imformation, and we can findout their is a password inside. Then we cansimply use grep to findoutthe password. <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$cat</span> bookmark.htmp|grep password. <br></code></pre></td></tr></table></figure></p><h2 id="leviathan1">Leviathan1</h2><ul><li>Their is a ececutable file inside. so i use radare2 to see theoutlook of the program. we can fond fourstring"secret","god","sex","love" inside. inside and the and before thefunction call strcmp function, the put "sex" into the register, so wecan know that this program check the input with "sex".</li><li>Therefore, i simply input sex, and get the root of leviathan2, andthen cat the password file inside 'Leviathan_pass/Leviathan2'</li></ul><h2 id="leviathan2">Leviathan2</h2><p>this one is a hard question, this problem i look out other people'swrite up, and they utilize the access function. when their is a filewith a space inside the filename, the access function will check the twofile seperately. &gt;For example, if the filename is "hank heroine.txt",then the access function &gt;will check both hank and heroine inside thefile.</p><p>After using radare2 to check the function, we can see that thefunction will printout the file using the shell of leviathan3.Therefore, I make a file named <code>hank\ heroine.txt</code> and make alink from heroine.txt to <code>/etc/leviathan_pass/leviathan3</code></p><h2 id="leviathan3">Leviathan3</h2><p>simply using <code>ltrace</code> to see how this file work. We canfind out that this program call a strcmp function, and compare the inputwith a specific string "snlprintf". so we can get the shell ofleviathan4.</p><h2 id="leviathan4">Leviathan4</h2><p>another simple problem, use <code>ltrace</code> we can find out thisprogram call the <code>fopen</code> function, so we can know that thisfunction is printing the content of the password. the only thing we needto do is to tranfer the ASCII code into strings.</p><h2 id="leviathan5">Leviathan5</h2><p>This program open the file at <code>/etc/file.log</code> but their isno such file. What's more this program print out the file using theshell of leviathan6. Similar to Leviathan2, I create a linkage between<code>/etc/file.log</code> and<code>/etc/leviathan_pass/leviathan6</code> , so it will print out thecontent of leviathan6.</p><h2 id="leviathan6">Leviathan6</h2><ul><li>First i use <code>ltrace</code> to find out what this program, and ifound that it calls the <code>atoi</code> function, which transfer astring into an interger. So i think the correct code of this function isinside this program.</li><li>Therefore, i use radare2 to reassemble the program, and there is onevar that store a hex number<code>1bd3</code>, and the later compare codealso compare the input with this variable.</li><li>So i use the Decimal number <code>7123</code> (0x1bd3) as the codeof this program. and get the shell of leviathan7.</li></ul><h2 id="leviathan7">Leviathan7</h2><p><img src="https://hackmd.io/_uploads/B1Yg6sMKn.png" /></p><h2 id="the-password-to-every-tlevel">the password to every tlevel</h2><center><table><thead><tr class="header"><th>level</th><th style="text-align: center;">password</th></tr></thead><tbody><tr class="odd"><td>leviathan1</td><td style="text-align: center;">PPIfmI1qsA</td></tr><tr class="even"><td>leviathan2</td><td style="text-align: center;">mEh5PNl10e</td></tr><tr class="odd"><td>leviathan3</td><td style="text-align: center;">Q0G8j4sakn</td></tr><tr class="even"><td>leviathan4</td><td style="text-align: center;">AgvropI4OA</td></tr><tr class="odd"><td>leviathan5</td><td style="text-align: center;">EKKlTF1Xqs</td></tr><tr class="even"><td>leviathan6</td><td style="text-align: center;">YZ55XPVk2l</td></tr><tr class="odd"><td>leviahtan7</td><td style="text-align: center;">8GpZ5f8Hze</td></tr></tbody></table></center>]]></content>
    
    
    
    <tags>
      
      <tag>Wargame</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大一上修課心得</title>
    <link href="/2023/01/19/%E4%BF%AE%E8%AA%B2%E5%BF%83%E5%BE%97/"/>
    <url>/2023/01/19/%E4%BF%AE%E8%AA%B2%E5%BF%83%E5%BE%97/</url>
    
    <content type="html"><![CDATA[<h2 id="清華大學大一上修課心得">清華大學大一上修課心得</h2><h3 id="前言">前言</h3><p>小弟不才，就讀清華大學清華學院學士班(不分系)，日後打算分流清大電機系，目前修課都是以電機系的必修為主，上學期剛結束，在此分享我在大一上的修課心得。</p><h3 id="微積分">微積分</h3><ul><li>開課老師 : 朱家杰</li><li>成績 : A+</li><li>評價 : 英文授課、老師很有趣、英文比較不標準</li><li>心得 :老師人很有趣，上課都會有互動，會抽學生問問題，每次段考前都會有其中抽獎，但我從來沒抽中。上課時會寫很多板書，會帶過課本例題。考試都會考證明題，所以有些許難度，每次段考都會有五個是非題。每周都會有作業，作業不算分也不檢查，當練習。每周三晚上是演習課，隔週會有小考，小考難度相對較低，內容大多是作業範圍。助教超級讚，都會上傳超級精美的筆記，真的大推。</li></ul><h3 id="邏輯設計">邏輯設計</h3><ul><li>開課老師 : 馬席彬</li><li>成績 : A+</li><li>評價 : 優質課程</li><li>心得 :這堂邏設並不會教到verilog，相對的很注重在其他基本的邏設知識，段考難度落差較大，有一次平均只有55分，有一次高達80分。個人覺得loading不會到很重，只有七次作業，每次大概6、7題，重點就是要讀通。</li></ul><h3 id="程式設計">程式設計</h3><ul><li>開課老師 : 黃之浩</li><li>成績 : A+</li><li>評價 : 教授沒什麼在教、涼到爆</li><li>心得 :教授上課基本上沒什麼在教，上課都是以寫題目為主，每次大概會花20至30分鐘講一下概念，然後讓學生自己摸索，沒錯，就是讓學生自己去上網查，自己通靈，所以很多部分都是靠學生自己去查的，從老師身上學到的東西真的很少。幾乎沒有作業，只有三個assignment，一個走迷宮的，一個是8皇后問題，finalproject是工程計算機。所以筆者認為這堂課很涼，只要早上去寫一寫lab就好了。但是注重自學能力，因為老師真的幾乎沒什麼在教。</li></ul><h3 id="普通化學">普通化學</h3><ul><li>開課老師 : 王育桓</li><li>成績 : A+</li><li>評價 : 選修化學、甜涼</li><li>心得 :老師上課都會上傳ppt，所以我都沒有去上課，考前大概用ppt複習一下，做個筆記，比較困難的是期末考，會考全範圍，據說是直接拿美國的化奧初選出題。因為我都沒在上課，所以也不知道怎麼寫修課心得，總之就是很涼啦。</li></ul><h3 id="大學中文">大學中文</h3><ul><li>開課老師 : 林家妃</li><li>成績 : A+</li><li>評價 : 優質、好棒的課程</li><li>心得 :當時選不上校本部的課程，於是就跑去選人社院的大學中文。雖然每次上課都要走很遠的路，但是就當作運動，順便還可以欣賞走上人社院的風景，而且也是因為這堂課讓我認識許多好朋友，加上老師成績給的很涼，全班有一半左右A+，真的是賺爛了。可惜這是家妃老師這學期在清大開的最後一堂課了，小弟深感難受。</li></ul><h3 id="普物實驗">普物實驗</h3><ul><li>開課老師 : 張雉傾</li><li>成績 : B</li><li>評價 : 成績不公開、破課</li><li>心得 :先不論哪一個教授開的，普物實驗就是破課一堂，一學分要做實驗做到晚上(平均四到六小時)，然後還要寫預報結報，真的是垃圾課程。然後這個教授的成績完全不透明，成績並不會更新道網路上，我交了14份報告卻只有拿回來四分，其他的都不知道跑哪去了，我覺得助教你要給我低分就算了，那你也讓我知道一下我為甚麼只有這個分數，讓我有改進的機會，真的是很頭痛，這學期得GPA就是被這堂破課拉下來的。</li></ul><h3 id="產創">產創</h3><ul><li>開課小組 : 網頁設計</li><li>成績 : A</li><li>評價 : 還行，沒有想像中甜</li><li>心得 :這堂課真的很涼，就每個禮拜去乖乖聽兩個小時就好了，沒什麼loading，但是成績比想像中還低。感覺也沒有學到甚麼東西，教得東西都偏簡單。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>NTHU</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>獨立研究</title>
    <link href="/2023/01/15/%E7%8D%A8%E7%AB%8B%E7%A0%94%E7%A9%B6/"/>
    <url>/2023/01/15/%E7%8D%A8%E7%AB%8B%E7%A0%94%E7%A9%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="獨立研究">獨立研究</h1><h2 id="研究動機">研究動機</h2><p>自然界中，許多生物具有特定的顏色，此種顏色可分為色素色與結構色兩大類，色素色為生物表層具有可以發散特定波長光線的官能機，因此吸收所有光線並反射特定波長的光線，以至於呈現特定顏色；結構色則是因為光線在奈米結構中散射、干涉與繞射產生光波長的選擇性反射。因此，此研究想探討奈米粒子，藉由緊密堆積與控制粒徑使奈米粒子呈現出不同顏色。</p><p>在先前的研究中，我們致力於製作力致變色可拉伸薄膜，因為其無須能源即可變色或是從透明變成有色的特性，使其成為一個良好的環保材料，具有智慧材料的潛力，因此被運用於許多層面，例如環保智能顯示器、應力示警。然而先前的研究成果沒有如預期中的具有高反射率的性質，因此在個別研究中，我想退一步從該研究並沒有仔細探討的薄膜的基材自組裝著手。</p><p>我認為若是提高自組裝的品質將可以有效地使薄膜的反射率增加，因此本研究將聚焦於各種不同的自組裝程序，包含垂直對流性自組裝與滴狀膠體溶液溶液對流性自組裝，嘗試不同條件下進行對流性自組裝，找出最成功的自組裝製程。</p><p>此外，在專題研究期間發現無法利用垂直對流自組裝將粒徑大於500nm的二氧化矽奈米粒子規則排列於玻片之上。因此，本研究將探討如何使大粒徑的二氧化矽奈米粒子利用垂直對流自組裝將粒徑大於500nm的二氧化矽奈米粒子規則排列於玻片之上。# 研究心得高一時看到學姊的報告，看到一堆奈米粒子球的SEM，立刻被這些密集堆積的球球吸引住，心想這個實驗室真酷，一堆奈米粒子，看起來就很好玩，一定要去這個實驗室做專題。</p><p>沒想到一待就是3年。這段期間內，我做了許多二氧化矽自組裝跟力至變色光子晶體的實驗，研究到一半時我發現自己欠缺奈米實驗最需要的耐心跟謹慎，微小的誤差常常被放大，連續數次的失敗讓我在研究中期陷入負面情緒。然而經歷了無數次成果無情的摧殘並在中興度過許多假日後，我完成了個別研究，並參加全國科學班比賽有幸能獲得教授的青睞拿到了佳作。</p><p>十分感謝宏達教授，雖然他不曾到實驗室親自指導我，但是常常在一個小時內回我email，很感謝他全力的支持，以及有趣、開放的對話方式（高三才解鎖的）。也感謝跟我同一實驗室的朋友毓修、哲源跟則璁，有你們一起面對困難，我才能繼續堅持下去把研究做完。更感謝學長幫我用SEM找自組裝的結構跟測量粒徑。</p>]]></content>
    
    
    
    <tags>
      
      <tag>HighSchool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>吳健雄summercamp</title>
    <link href="/2023/01/15/%E5%90%B3%E5%81%A5%E9%9B%84summercamp/"/>
    <url>/2023/01/15/%E5%90%B3%E5%81%A5%E9%9B%84summercamp/</url>
    
    <content type="html"><![CDATA[<h1 id="吳健雄科學營">吳健雄科學營</h1><ul><li>時間 : 8/1 ~ 8/6</li><li>地點 : 杉林溪</li><li>費用 : 六天7000</li></ul><h2 id="內容">內容</h2><p>這個營隊真的超級棒，整體來講超級棒，先從生活開始，每天都住在杉林溪大飯店，每天吃六餐，早餐吃到飽，吃完吃茶點，吃完吃午餐桌菜，吃完喫茶點，吃完吃晚餐，吃完吃宵夜。真的爽爽吃，胖了好多。行程有一半(以上)是聽演講，在台下聽大師的研究內容，並問教授問題，其實撇除生物聽不太懂之外其他都是很有趣的演講。我覺得晚上的夜談更是精彩，夜談是教授開課給學生選的概念，我第一天晚上選了嚴宏揚---有毒海洋生物，真的超級精彩，教授講了很多有毒生物的知識，也講了一些生物的美，讚嘆生物機制之精妙，最後教授還說以後暑假可以去海生館找他打工換宿，可以賺零用錢還可以去屏東墾丁那邊玩，而且工作內容是看顯微鏡，有機會的話之後蠻想去的，最有趣的是有人位教授生科系出路的問題，教授哀傷的說:哎~~讀生科，一生坎坷，隨即tag後面的理論天文地科系教授，問他對於學術界的感想，天文教授也感傷的說:研究一文不值。第二次是選劉怡維的天文，最近發現他在清大開普物(聽說是大刀)，我有點忘記內容了，沒有特別的記憶點。第三天是趙丰的天外來客，真的超級推，最後那個后羿射十日真的超級精彩，有機會的話可以去聽他的演講或是上網找，真的推爆。## 同儕我覺得這個營隊最大的特點就是同儕，跟你同床的可能是地科奧匹國手，跟你打牌的可能是UCBerkley的學長，跟你同小隊的會有台大醫的學長。總之跟這些人相處真的是一個很棒的交流。品增那房得特別嗨，晚上都在賭博。做簡報那天晚上跟品增跟北一女隊友草草做完海報就回房間(養老行程，其他組都蠻認真的)，洗完澡不知道幹嘛就找品增去夜遊，後來也找了北一女的隊友，一群人興高采烈地去夜遊，殊不知12:30路燈都關了，什麼都看不到，視野範圍只有手電筒照到的範圍(應該張角20度，10公尺遠而已吧)，後來越走越裡面，心中的恐懼積累，任何風吹草動都把我們嚇得提心吊膽，後來就果斷返航，放棄本來想要看的螢火蟲。回飯店後沒有睡意，繼續嗨，去品增那房打德撲，一開始不太熟悉輸了蠻多的，後來就使用保守打法，慢慢賺回來，那邊有幾個德撲強者，都會算期望值，知道甚麼時候要下注，怎麼加註，真的很好玩，一路玩到了4點。小隊聚的時候都會完一些桌遊，第一次玩狼人殺的時候，話講太多被誤認為高玩，後來三場都是第一晚就被刀，而且女巫都不救(是同一個人)，哭慘了，以後玩狼殺第一場不要講太多話。後來玩UNO玩到最後一名，總之在吳健雄玩桌遊不要太認真。# 杉林溪的夜晚有一天晚上趙丰教授帶我們走步道去夜訪月老廟，一群人擠月老廟是有點擁擠，不知道月老有沒有聽到我的話。最後一天玩完狼人殺之後一群人跑去屋頂看星星，很幸運的我們上去的時候霧已經散去，可以清楚的看到銀河，而且那天有很多流星，我們留戀於浪漫的星空，乾脆的直接躺在屋頂看星星，用沒人要的海報墊著，慢慢數著一顆一顆劃過天際的流星，想要許願，但流星總是在許完願之前消失。一躺就是兩個小時，我們一路看星星看到2、3點，隊輔都幫我們拿浴巾上來讓我們睡屋頂了，看星星看太開心，隔天早上起不來，錯過了健行行程。最後一天結業，有一個教授讓參加吳健雄的大校，全體上台唱校歌，第一個上台的是人數最多的北一女，多到講台快站不下，第二個好像是一中吧，彰中當然沒有，只有兩個人。</p><p>明年想再去一次，有一部分學員是大一升大二來參加，如果明年不去辦宿營的話就來吳健雄度假。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Activity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TheVeryBeginning</title>
    <link href="/2023/01/15/TheVeryBeginning/"/>
    <url>/2023/01/15/TheVeryBeginning/</url>
    
    <content type="html"><![CDATA[<h1 id="my-first-post">My first post</h1><h2 id="這個部落格">這個部落格</h2><p>今天來建了這個靜態網站，用<code>hexo</code>架出來的，就是一直套用模板，目前正在努力改模板，希望能把自己的部落格做的漂亮一點。之後應該會把這個網站加上一些酷酷的東西，像是頭會動的貓貓還有酷酷的特效之類的。關於這個網頁，然後這個部落格我用的 theme 是 <strong>fluid</strong>模板，然後我目前遇到的技術上的困難是我更改<code>/public/img</code>的圖片之後網頁上傳github之後網站會的圖片跟文章會更新，但是它的色彩卻沒有更新；相對地當我想要用localhost先預覽的時候我卻發現他的圖片並沒有變動，但是顏色有更動。&gt;因為今天要測試網站下拉的樣式，所以上面放了兩篇高中時候的東西，也算是高中記錄。## 來由關於為何要件這個網站呢，簡單記錄一些有趣的活動、大學修課的心得，一些自己學習的心路歷程，或是分享一些筆記之類的(大一上有用notion做一些筆記，看之後能不能傳上來)。加上之前看到兩個資工電神在架，感覺非常有趣，想說恰巧放寒假就來架一下。</p><h2 id="今日份的筆記">今日份的筆記</h2><ul><li>以下是hexo之後會常常用到的指令 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo n <span class="hljs-string">&quot;xxx&quot;</span> = hexo new <span class="hljs-string">&quot;xxx&quot;</span> <span class="hljs-comment"># 新增名為 xxx 的文章</span><br>hexo g = hexo generate <span class="hljs-comment"># 生成靜態網站</span><br>hexo s = hexo sever <span class="hljs-comment"># 啟動本地預覽</span><br>hexo d = hexo deploy <span class="hljs-comment"># 部屬網站</span><br>hexo clean <span class="hljs-comment"># 清除緩存 ，一般不會用到</span><br></code></pre></td></tr></table></figure></li><li>一個今天遇到的技術上的問題 <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown">. : 因為這個系統上已停用指令碼執行，所以無法載入 C:UsersUSERNAMEDocumentsWindows<br>PowerShellprofile.ps1 檔案。如需詳細資訊，請參閱 about<span class="hljs-emphasis">_Execution_</span>Policies，網址為<br>https:/go.microsoft.com/fwlink/?LinkID=135170。<br>位於 線路:1 字元:3<br><span class="hljs-bullet">+</span> . &#x27;C:UsersUSERNAMEDocumentsWindowsPowerShellprofile.ps1&#x27;<br><span class="hljs-bullet">+</span>   <span class="hljs-code">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="hljs-bullet">    +</span> CategoryInfo          : SecurityError: (:) [], PSSecurityException<br><span class="hljs-bullet">    +</span> FullyQualifiedErrorId : UnauthorizedAccess<br></code></pre></td></tr></table></figure>後來用administrator的身分開啟shell，然後打下面的指令就解決了，雖然我也不是很確定為甚麼可以這樣解決，但是我卡在這個地方快一個小時，所以還是紀錄一下。<figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">Set</span>-ExecutionPolicy <span class="hljs-comment">RemoteSigned</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
